name: Update Screenshots For Documentation

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    AzureDevOpsLighthouseIntegrationTestToken: ${{ secrets.AZUREDEVOPSLIGHTHOUSEINTEGRATIONTESTTOKEN }}
    JiraLighthouseIntegrationTestToken: ${{ secrets.JIRALIGHTHOUSEINTEGRATIONTESTTOKEN }}
    AzureDevOpsLighthouseE2ETestToken: ${{secrets.AZUREDEVOPSLIGHTHOUSEE2ETESTTOKEN}}
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  screenshot:
    runs-on: ubuntu-latest
    name: Recreate and upload new Screenshots
    permissions: write-all
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
            echo "ARTIFACT_VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            # Get the latest tag from the main branch for artifact download
            LATEST_TAG=$(git describe --tags --abbrev=0 origin/main)
            echo "VERSION=dev-latest" >> $GITHUB_OUTPUT
            echo "ARTIFACT_VERSION=${LATEST_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Install E2E dependencies
        run: npm ci
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
  
      - name: Install Chromium
        run: npx playwright install chromium --with-deps
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
        
      - name: Download Lighthouse Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: ci.yml
          name: Lighthouse ${{ steps.version.outputs.ARTIFACT_VERSION }}
          path: ./Lighthouse
          workflow_conclusion: ""
          
      - name: Set linux executable permission
        run: sudo chmod -R +x ./linux-x64
        working-directory: ./Lighthouse  

      - name: Run Lighthouse
        run: |
          ./Lighthouse > lighthouse.log 2>&1 &
        working-directory: ./Lighthouse/linux-x64
        env:
          Database__Provider: sqlite
          Database__ConnectionString: 'Data Source=lighthouse.db'

      - name: Write private key to file
        run: echo "${{ secrets.LIGHTHOUSE_LICENSE_PRIVATE_KEY }}" > private_key.pem

      - name: Generate license for E2E Tests
        run: |
          python Scripts/generate_license.py private_key.pem license.json "1886" "Tim Lighthouse" "tim.lighthouse@letpeople.work" "Let People Work GmbH" "$(date -d '+45 days' '+%Y-%m-%d')"

      - name: Wait for Lighthouse to start
        run: |
          echo "Waiting for server to be ready..."
          timeout 30 bash -c 'until curl --silent --fail --insecure https://localhost:5001; do sleep 1; done'
          echo "Server is ready!"
     
      - name: Upload license to Lighthouse
        run: |
          echo "Uploading license file..."
          curl --insecure -X POST \
            -F "file=@license.json" \
            https://localhost:5001/api/license/import
          echo "License uploaded successfully!"
          
      - name: Recreating Screenshot using Playwright
        run: npm run screenshots
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
        env:
          LIGHTHOUSEURL: https://localhost:5001

      - name: Stop Lighthouse Server
        if: always()
        run: |
          pkill Lighthouse || true
          cat ./linux-x64/lighthouse.log
        working-directory: ./Lighthouse

      - name: Delete Downloaded Artifacts
        run: |
          echo "Removing downloaded Lighthouse artifacts..."
          rm -rf ./Lighthouse
        shell: bash

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            commit-message: "Update screenshots for version ${{ steps.version.outputs.VERSION }}"
            title: "Update screenshots for Documentation"
            body: |
                ## Description
                Automated PR to update documentation screenshots.
                
                * Version: ${{ steps.version.outputs.VERSION }}
                * Triggered by: ${{ github.event_name }}
            branch: docs/update-screenshots-${{ steps.version.outputs.VERSION }}
            base: main
            delete-branch: true
            labels: |
                documentation
                automated pr
            draft: false

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-screenshots
          path: ./Lighthouse.EndToEndTests/playwright-report/
          retention-days: 30
            
