name: Build And Deploy Lighthouse

env:
  DOTNET_VERSION: '9'  
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AzureDevOpsLighthouseIntegrationTestToken: ${{ secrets.AZUREDEVOPSLIGHTHOUSEINTEGRATIONTESTTOKEN }}
  JiraLighthouseIntegrationTestToken: ${{ secrets.JIRALIGHTHOUSEINTEGRATIONTESTTOKEN }}
  AzureDevOpsLighthouseE2ETestToken: ${{secrets.AZUREDEVOPSLIGHTHOUSEE2ETESTTOKEN}}
  LinearAPIKey: ${{ secrets.LINEARAPIKEY }}

on:
  push:
    branches: [ "main" ]    
    paths:
      - "Lighthouse.Backend/**"
      - "Lighthouse.Backend.Tests/**"
      - "Lighthouse.EndToEndTests/**"
      - "Lighthouse.Frontend/**"
      - ".github/workflows/ci.yml"
      - "examples/postgres/**"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  

jobs:

  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.check.outputs.backend }}
      frontend: ${{ steps.check.outputs.frontend }}
      e2e: ${{ steps.check.outputs.e2e }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check
        run: |
          base_ref=${{ github.base_ref }}
          if [ -z "$base_ref" ]; then
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # On main branch, use the last version tag as base
            base_ref=$(git describe --tags --abbrev=0)
          else
            # Default to checking against the previous commit on other branches
            base_ref=$(git rev-parse HEAD^)
          fi
          else
          git fetch origin $base_ref
          base_ref="origin/$base_ref"
          fi

          # Print all changed files
          echo "Changed files:"
          git diff --name-only $base_ref HEAD

          github_changes=$(git diff --name-only $base_ref HEAD | grep -q ^.github/workflows/ci.yml && echo 'true' || echo 'false')
          backend=$(git diff --name-only $base_ref HEAD | grep -Eq '^Lighthouse.Backend(/|.Tests/)' || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          frontend=$(git diff --name-only $base_ref HEAD | grep -q ^Lighthouse.Frontend/ || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          e2e=$(git diff --name-only $base_ref HEAD | grep -q ^Lighthouse.EndToEndTests/ || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')

          echo "backend=$backend"
          echo "frontend=$frontend"
          echo "e2e=$e2e"
          echo "backend=$backend" >> $GITHUB_OUTPUT
          echo "frontend=$frontend" >> $GITHUB_OUTPUT
          echo "e2e=$e2e" >> $GITHUB_OUTPUT

  backend:
    name: Verify Backend
    needs: changes
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      if: needs.changes.outputs.backend == 'true'
      with:
        fetch-depth: '0'

    - name: Remove Frontend sonar-project.properties
      if: needs.changes.outputs.backend == 'true'
      run: |
        rm ./Lighthouse.Frontend/sonar-project.properties

    - name: Setup .NET
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{env.DOTNET_VERSION}}

    - name: Set up JDK 17
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu'

    - name: Install SonarCloud scanner
      if: needs.changes.outputs.backend == 'true'
      run: |
        dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarCloud analysis
      if: needs.changes.outputs.backend == 'true'
      run: |
        dotnet sonarscanner begin /k:"LetPeopleWork_Lighthouse" /o:"letpeoplework" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" /d:sonar.exclusions="**/Lighthouse.Migrations.Sqlite/**/*,**/Lighthouse.Migrations.Postgres/**/*,**/Lighthouse.Frontend/**/*,**/Lighthouse.EndToEndTests/**/*"

    - name: Build and test
      if: needs.changes.outputs.backend == 'true'
      run: |
        dotnet build ./Lighthouse.Backend

        dotnet test ./Lighthouse.Backend --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: End SonarCloud analysis
      if: needs.changes.outputs.backend == 'true'
      run: |
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  frontend:
    name: Verify Frontend
    needs: changes
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      if: needs.changes.outputs.frontend == 'true'
      with:
        fetch-depth: '0'

    - name: Use Node.js
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      if: needs.changes.outputs.frontend == 'true'
      run: npm install
      working-directory: ./Lighthouse.Frontend

    - name: Build Frontend
      if: needs.changes.outputs.frontend == 'true'
      run: npm run build
      working-directory: ./Lighthouse.Frontend

    - name: Test Frontend
      if: needs.changes.outputs.frontend == 'true'
      run: npm run sonarreport
      working-directory: ./Lighthouse.Frontend

    - name: Frontend SonarCloud
      if: needs.changes.outputs.frontend == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      working-directory: ./Lighthouse.Frontend
      run: |
        npm install -g sonarqube-scanner
        sonar-scanner

  e2etests:
    name: Verify End to End Tests
    needs: changes

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      if: needs.changes.outputs.e2e == 'true'
      with:
        fetch-depth: '0'

    - name: Use Node.js
      if: needs.changes.outputs.e2e == 'true'
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      if: needs.changes.outputs.e2e == 'true'
      run: npm install
      working-directory: ./Lighthouse.EndToEndTests

    - name: Build E2E Tests
      if: needs.changes.outputs.e2e == 'true'
      run: npm run build
      working-directory: ./Lighthouse.EndToEndTests

  tag:
    runs-on: ubuntu-latest
    permissions: write-all

    concurrency:
      group: tag-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false

    needs: 
      - frontend
      - backend
      - e2etests

    steps:          
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Set version based on branch
        id: set_version
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Running on main branch, creating tag if necessary"
            echo "create_tag=true" >> $GITHUB_ENV
          else
            echo "Not on main branch, setting version to current build number"
            echo "version=${{ github.run_number }}" >> $GITHUB_ENV
            echo "create_tag=false" >> $GITHUB_ENV
          fi

      - name: Create tag if necessary
        if: env.create_tag == 'true'
        id: version
        uses: fregante/daily-version-action@v2
        with:
          prefix: v

      - name: Process version to create fileversion
        id: process_version
        run: |
          if [ "${{ env.create_tag }}" == "true" ]; then
            version=${{ steps.version.outputs.version }}
          else
            version=${{ env.version }}
          fi
          # Remove the prefix 'v' from the version string if it exists
          fileversion=${version#v}
          # Output the processed fileversion
          echo "fileversion=$fileversion" >> $GITHUB_ENV
          echo "fileversion=$fileversion" >> $GITHUB_OUTPUT
    
      
    outputs:
      created: ${{ steps.version.outputs.created }}
      version: ${{ steps.version.outputs.version }}
      fileversion: ${{ steps.process_version.outputs.fileversion }}

  packageapp:
    name: Package App
    runs-on: ubuntu-latest
    needs: tag

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm install
        working-directory: ./Lighthouse.Frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./Lighthouse.Frontend

      - name: Build Backend Solution
        run: dotnet build -c Release -p:Version=${{ needs.tag.outputs.fileversion }}
        working-directory: ./Lighthouse.Backend

      - name: publish win-x64
        run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/win-x64
        working-directory: ./Lighthouse.Backend/Lighthouse.Backend

      - name: Copy update_windows.ps1
        run: cp ./Scripts/update_windows.ps1 ./Lighthouse.Backend/Lighthouse.Backend/publish/win-x64/update_windows.ps1

      - name: Remove development settings from win-x64
        run: rm -f ./Lighthouse.Backend/Lighthouse.Backend/publish/win-x64/appsettings.Development.json

      - name: publish osx-x64
        run: dotnet publish -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/osx-x64
        working-directory: ./Lighthouse.Backend/Lighthouse.Backend

      - name: Copy update_mac.sh
        run: cp ./Scripts/update_mac.sh ./Lighthouse.Backend/Lighthouse.Backend/publish/osx-x64/update_mac.sh

      - name: Remove development settings from osx-x64
        run: rm -f ./Lighthouse.Backend/Lighthouse.Backend/publish/osx-x64/appsettings.Development.json

      - name: Set osx executable permission
        run: sudo chmod +x ./publish/osx-x64/Lighthouse
        working-directory: ./Lighthouse.Backend/Lighthouse.Backend

      - name: publish linux-x64
        run: dotnet publish -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/linux-x64
        working-directory: ./Lighthouse.Backend/Lighthouse.Backend

      - name: Copy update_linux.sh
        run: cp ./Scripts/update_linux.sh ./Lighthouse.Backend/Lighthouse.Backend/publish/linux-x64/update_linux.sh      

      - name: Remove development settings from linux-x64
        run: rm -f ./Lighthouse.Backend/Lighthouse.Backend/publish/linux-x64/appsettings.Development.json

      - name: Set linux executable permission
        run: sudo chmod -R +x ./publish/linux-x64
        working-directory: ./Lighthouse.Backend/Lighthouse.Backend

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: ./Lighthouse.Backend/Lighthouse.Backend/publish      

  verifysqlite:
    name: Verify Standalone App against sqlite
    runs-on: ubuntu-latest
    needs:
      - packageapp
      - tag
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - uses: actions/download-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: ./Lighthouse

      - name: Install E2E dependencies
        run: npm ci
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
  
      - name: Install Chromium
        run: npx playwright install chromium --with-deps
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install cryptography

      - name: Set linux executable permission
        run: sudo chmod -R +x ./linux-x64
        working-directory: ./Lighthouse  

      - name: Run Lighthouse
        run: |
          ./Lighthouse > lighthouse.log 2>&1 &
        working-directory: ./Lighthouse/linux-x64
        env:
          Database__Provider: sqlite
          Database__ConnectionString: 'Data Source=lighthouse.db'

      - name: Write private key to file
        run: echo "${{ secrets.LIGHTHOUSE_LICENSE_PRIVATE_KEY }}" > private_key.pem

      - name: Generate license for E2E Tests
        run: |
          python Scripts/generate_license.py private_key.pem license.json "Lighthouse CI" "ci@lighthouse.test" "Lighthouse Test Organization" "$(date -d '+45 days' '+%Y-%m-%d')"

      - name: Wait for Lighthouse to start
        run: |
          echo "Waiting for server to be ready..."
          timeout 30 bash -c 'until curl --silent --fail --insecure https://localhost:5001; do sleep 1; done'
          echo "Server is ready!"

          cat lighthouse.log
        working-directory: ./Lighthouse/linux-x64

      - name: Upload license to Lighthouse
        run: |
          echo "Uploading license file..."
          curl --insecure -X POST \
            -F "file=@license.json" \
            https://localhost:5001/api/license/import
          echo "License uploaded successfully!"
  
      - name: Run Playwright tests
        run: npm run test
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
        env:
          LIGHTHOUSEURL: https://localhost:5001
  
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-sqlite
          path: ./Lighthouse.EndToEndTests/playwright-report/
          retention-days: 30

      - name: Stop Lighthouse Server
        if: always()
        run: |
          pkill Lighthouse || true
          cat ./linux-x64/lighthouse.log
          rm -rf ./linux-x64/logs
        working-directory: ./Lighthouse

  docker:
    runs-on: ubuntu-latest
    needs:
      - tag

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          # Automatically sets up the default builder
          use: true    

      - name: Build and push multi-platform Docker image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          VERSION=${{ needs.tag.outputs.fileversion }}

          # Define platforms you want to support
          PLATFORMS="linux/amd64,linux/arm64,linux/arm"

          # Build and push the multi-platform image
          docker buildx build --platform $PLATFORMS --no-cache \
            --file Dockerfile \
            --tag ghcr.io/$REPO_NAME:$VERSION \
            --tag ghcr.io/$REPO_NAME:dev-latest \
            --build-arg VERSION=$VERSION \
            --push .

  verifypostgres:
    name: Verify Lighthouse against Postgres
    runs-on: ubuntu-latest
    needs:
      - packageapp
      - tag
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/download-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: ./Lighthouse  

      - name: Install E2E dependencies
        run: npm ci
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests

      - name: Run Postgres
        run: |
          docker run -d --name lighthouse-postgres -e POSTGRES_DB=lighthouse -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres:17.2-alpine

          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to start..."
          timeout 30 bash -c 'until docker exec lighthouse-postgres pg_isready -U postgres; do sleep 1; echo "Waiting for PostgreSQL..."; done'
          echo "PostgreSQL is ready!"

      - name: Install Chromium
        run: npx playwright install chromium --with-deps
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install cryptography

      - name: Set linux executable permission
        run: sudo chmod -R +x ./linux-x64
        working-directory: ./Lighthouse  

      - name: Run Lighthouse
        run: |
          ./Lighthouse > lighthouse.log 2>&1 &
        working-directory: ./Lighthouse/linux-x64
        env:
          Database__Provider: postgres
          Database__ConnectionString: 'Host=localhost;Port=5432;Database=lighthouse;Username=postgres;Password=postgres'

      - name: Write private key to file
        run: echo "${{ secrets.LIGHTHOUSE_LICENSE_PRIVATE_KEY }}" > private_key.pem

      - name: Generate license for E2E Tests
        run: |
          python Scripts/generate_license.py private_key.pem license.json "Lighthouse CI" "ci@lighthouse.test" "Lighthouse Test Organization" "$(date -d '+45 days' '+%Y-%m-%d')"

      - name: Wait for Lighthouse to start
        run: |
          echo "Waiting for server to be ready..."
          timeout 30 bash -c 'until curl --silent --fail --insecure https://localhost:5001; do sleep 1; done'
          echo "Server is ready!"

          cat lighthouse.log
        working-directory: ./Lighthouse/linux-x64

      - name: Upload license to Lighthouse
        run: |
          echo "Uploading license file..."
          curl --insecure -X POST \
            -F "file=@license.json" \
            https://localhost:5001/api/license/import
          echo "License uploaded successfully!"

      - name: Run Playwright tests
        run: npm run test
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
        env:
          LIGHTHOUSEURL: https://localhost:5001

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-postgres
          path: ./Lighthouse.EndToEndTests/playwright-report/
          retention-days: 30

      - name: Stop Lighthouse Server
        if: always()
        run: |
          pkill Lighthouse || true
          cat ./linux-x64/lighthouse.log
          rm -rf ./linux-x64/logs
        working-directory: ./Lighthouse
      
  release:
    runs-on: ubuntu-latest
    needs:
    - tag
    - docker
    - verifysqlite
    - verifypostgres

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    environment:
      name: Release

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Tag docker image with latest
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker pull ghcr.io/$REPO_NAME:${{ needs.tag.outputs.fileversion }}
          docker tag ghcr.io/$REPO_NAME:${{ needs.tag.outputs.fileversion }} ghcr.io/$REPO_NAME:latest
          docker push ghcr.io/$REPO_NAME:latest


      # Install Cosign
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      # Sign the image using keyless signing (GitHub OIDC)
      - name: Sign Docker image with Cosign
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          cosign sign --yes ghcr.io/$REPO_NAME:${{ needs.tag.outputs.fileversion }}
          cosign sign --yes ghcr.io/$REPO_NAME:latest

      # Verify the signature (optional, for debugging)
      - name: Verify the signature
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          cosign verify --certificate-identity="https://github.com/LetPeopleWork/Lighthouse/.github/workflows/ci.yml@refs/heads/main" --certificate-oidc-issuer="https://token.actions.githubusercontent.com" ghcr.io/$REPO_NAME:${{ needs.tag.outputs.fileversion }}
          cosign verify --certificate-identity="https://github.com/LetPeopleWork/Lighthouse/.github/workflows/ci.yml@refs/heads/main" --certificate-oidc-issuer="https://token.actions.githubusercontent.com" ghcr.io/$REPO_NAME:latest

      - uses: actions/download-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: LighthouseArtifacts

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/win-x64
          dest: Lighthouse-win-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/osx-x64
          dest: Lighthouse-osx-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/linux-x64
          dest: Lighthouse-linux-x64.zip

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "Lighthouse-win-x64.zip,Lighthouse-osx-x64.zip, Lighthouse-linux-x64.zip"
          tag: ${{ needs.tag.outputs.version }}
          prerelease: true
          name: "Lighthouse ${{ needs.tag.outputs.version }}"
          token: ${{ secrets.RELEASE_CREATION_TOKEN}}